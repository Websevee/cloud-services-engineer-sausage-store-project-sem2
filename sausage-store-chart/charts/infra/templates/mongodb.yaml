apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  annotations:
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        envFrom:
          - configMapRef:
              name: mongodb-conf
        ports:
        - containerPort: {{ .Values.mongodb.containerPort }}
        resources:
          requests:
            memory: "128Mi"
            cpu: "10m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  ports:
  - port: {{ .Values.mongodb.containerPort }}
    targetPort: {{ .Values.mongodb.containerPort }}
  selector:
    app: mongodb
  clusterIP: None
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  annotations:
    helm.sh/hook: "post-install"
    helm.sh/hook-weight: "5"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  template:
    spec:
      containers:
      - name: mongodb-init
        image: mongo:7.0
        envFrom:
          - configMapRef:
              name: mongodb-conf
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for MongoDB to be ready..."
          for i in $(seq 1 30); do
            if mongosh --host mongodb --quiet --eval "db.runCommand({ ping: 1 })" > /dev/null 2>&1; then
              echo "MongoDB is ready"
              break
            fi
            echo "Waiting for MongoDB... ($i/30)"
            sleep 2
          done
          
          echo "Creating user and database..."
          mongosh --host mongodb --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval "
            db = db.getSiblingDB('${MONGO_REPORTS_DATABASE}');
            db.createUser({
              user: '${MONGO_REPORTS_USERNAME}',
              pwd: '${MONGO_REPORTS_PASSWORD}',
              roles: [{ role: 'readWrite', db: '${MONGO_REPORTS_DATABASE}' }]
            });
          " && echo "User and database created successfully"
      restartPolicy: OnFailure
  backoffLimit: 4
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-conf
  annotations:
    helm.sh/hook-weight: "-50"
    helm.sh/hook-delete-policy: "before-hook-creation"
data:
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }}
  MONGO_REPORTS_DATABASE: {{ .Values.mongodb.env.MONGO_REPORTS_DATABASE }}
  MONGO_REPORTS_USERNAME: {{ .Values.mongodb.env.MONGO_REPORTS_USERNAME }}
  MONGO_REPORTS_PASSWORD: {{ .Values.mongodb.env.MONGO_REPORTS_PASSWORD }}